#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT 
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================
# Current Build
# Log: 
#     1. Replaced luci-app-dockerman

name: Build Openwrt Lean x86_64

on:
  release:
    types: [published]

  #push:
  #  branches:
  #    - master

    paths:
      - 'x86_64.config'
      - 'diy.sh'

   # 9:30 PM (21:30) UTC = 5:30 AM (5:30) Next Day GMT +08 
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: 'x86_64.config'
  DIY_SH: 'diy.sh'
  FREE_UP_DISK: true
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  TZ: America/Los_Angeles

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc

    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet
        docker rmi `docker images -q`
        sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Clone custom source code
      run: |
        rm -rf openwrt/package/lean/luci-app-dockerman
        rm -rf luci-app-dockerman
        git clone https://github.com/KFERMercer/luci-app-dockerman.git
        mv luci-app-dockerman openwrt/package/lean/luci-app-dockerman
        cd openwrt/package
        mkdir coolapps
        cd coolapps
        git clone https://github.com/rufengsuixing/luci-app-adguardhome.git
        git clone https://github.com/vernesong/OpenClash.git
        mv OpenClash/luci-app-openclash ./luci-app-openclash
        rm -rf OpenClash
        git clone https://github.com/Lienol/openwrt-package.git
        mv openwrt-package/lienol/luci-app-ssr-python-pro-server ./luci-app-ssr-python-pro-server
        mv openwrt-package/lienol/luci-theme-bootstrap-mod ./luci-theme-bootstrap-mod
        rm -rf openwrt-package
        git clone https://github.com/ujincn/smartdns.git
        git clone https://github.com/ujincn/luci-app-smartdns-compat.git

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        rm openwrt/feeds/luci/applications/luci-app-nlbwmon/luasrc/view/nlbw/display.htm
        mv nlbw/display.htm openwrt/feeds/luci/applications/luci-app-nlbwmon/luasrc/view/nlbw/display.htm
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH
        make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/debugger-action@master
      if: env.SSH_ACTIONS == 'true'

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) V=s
        echo "::set-output name=status::success"

    - name: Get Date
      run: |
        version=$(date +%Y-%m-%d)
        echo "::set-env name=VERSION::$version"

    - name: Reduce file size
      run: |
        find openwrt/bin/targets/ -name "*rootfs*img*" -delete
        find openwrt/bin/targets/ -name "*vmlinuz" -delete

    - name: Upload bin directory
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: Openwrt_${{ env.VERSION }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: Openwrt_firmware_${{ env.VERSION }}
        path: ${{ env.FIRMWARE }}
